name: Deploy ASP.NET Core to Ubuntu Server

on:
  push:
    branches:
      - main
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Test
        run: dotnet test --no-build --verbosity normal --configuration Release

      - name: Publish
        run: dotnet publish --no-build --configuration Release --output ./publish

      - name: Create deployment package
        run: |
          cd publish
          tar -czf ../deployment.tar.gz *
          cd ..

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Deploy to Ubuntu Server via password
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_HOST << 'EOF'
            cd /var/www/html/aspdotnetapi

            # Stop existing service if running
            sudo systemctl stop aspdotnetapi || true

            # Create deployment directory if missing
            sudo mkdir -p /var/www/html/aspdotnetapi

            # Backup current deployment
            if [ -d "/var/www/html/aspdotnetapi/backup" ]; then
              sudo rm -rf /var/www/html/aspdotnetapi/backup
            fi
            if [ -f "/var/www/html/aspdotnetapi/TestAPI.dll" ]; then
              sudo mkdir -p /var/www/html/aspdotnetapi/backup
              sudo cp -r /var/www/html/aspdotnetapi/* /var/www/html/aspdotnetapi/backup/ || true
            fi

            # Clean deployment folder
            sudo rm -rf /var/www/html/aspdotnetapi/*
          EOF

      - name: Copy deployment package to server
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -p "$SERVER_PASSWORD" scp -o StrictHostKeyChecking=no deployment.tar.gz $SERVER_USERNAME@$SERVER_HOST:/tmp/

      - name: Extract and configure ASP.NET Core app
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_HOST << 'EOF'
            cd /tmp

            # Extract deployment package
            sudo tar -xzf deployment.tar.gz -C /var/www/html/aspdotnetapi/
            sudo chown -R www-data:www-data /var/www/html/aspdotnetapi
            sudo chmod -R 755 /var/www/html/aspdotnetapi
            sudo chmod +x /var/www/html/aspdotnetapi/TestAPI

            # Create or update systemd service
            sudo tee /etc/systemd/system/aspdotnetapi.service > /dev/null <<SERVICE_EOF
          [Unit]
          Description=ASP.NET Core API Application
          After=network.target

          [Service]
          Type=notify
          ExecStart=/usr/bin/dotnet /var/www/html/aspdotnetapi/TestAPI.dll
          Restart=always
          RestartSec=5
          KillSignal=SIGINT
          SyslogIdentifier=aspdotnetapi
          User=www-data
          Environment=ASPNETCORE_ENVIRONMENT=Production
          Environment=ASPNETCORE_URLS=http://localhost:5001
          WorkingDirectory=/var/www/html/aspdotnetapi

          [Install]
          WantedBy=multi-user.target
          SERVICE_EOF

            # Reload systemd and start service
            sudo systemctl daemon-reload
            sudo systemctl enable aspdotnetapi
            sudo systemctl start aspdotnetapi
            sleep 5
            sudo systemctl status aspdotnetapi --no-pager

            # Clean up
            rm -f /tmp/deployment.tar.gz
          EOF
