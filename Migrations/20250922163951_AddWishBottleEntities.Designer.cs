// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestAPI;

#nullable disable

namespace TestAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250922163951_AddWishBottleEntities")]
    partial class AddWishBottleEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("TestAPI.Models.Blood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name_English")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name_Myanmar")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("BloodGroup");
                });

            modelBuilder.Entity("TestAPI.Models.CatchRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BottleId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CaughtAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserFingerprint")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BottleId");

                    b.ToTable("CatchRecords");
                });

            modelBuilder.Entity("TestAPI.Models.WishBottle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Hearts")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("Smiles")
                        .HasColumnType("int");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("ThrownAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserFingerprint")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("WishBottles");
                });

            modelBuilder.Entity("TestAPI.Models.CatchRecord", b =>
                {
                    b.HasOne("TestAPI.Models.WishBottle", "Bottle")
                        .WithMany("CatchRecords")
                        .HasForeignKey("BottleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bottle");
                });

            modelBuilder.Entity("TestAPI.Models.WishBottle", b =>
                {
                    b.Navigation("CatchRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
